import express from 'express';
import Payment from '../models/Payment.js';
import UserBalance from '../models/UserBalance.js';

const router = express.Router();

// ‚úÖ Create new payment request
router.post('/create', async (req, res) => {
  try {
    const {
      amount,
      transactionId,
      senderNumber,
      userBkashNumber,
      user,
      mathQuestion,
      mathAnswer,
      userMathAnswer
    } = req.body;

    console.log('üì• Received payment request:', {
      amount,
      transactionId,
      senderNumber,
      userEmail: user.email,
      userId: user.uid
    });

    // Check if transaction ID already exists
    const existingPayment = await Payment.findOne({ transactionId: transactionId.toUpperCase() });
    if (existingPayment) {
      return res.status(400).json({
        success: false,
        message: '‡¶è‡¶á ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!'
      });
    }

    // Create new payment
    const newPayment = new Payment({
      amount: parseFloat(amount),
      transactionId: transactionId.toUpperCase().trim(),
      senderNumber: senderNumber.trim(),
      userBkashNumber: userBkashNumber || '01766325020',
      userId: user.uid,
      user: {
        uid: user.uid,
        email: user.email,
        displayName: user.displayName,
        phoneNumber: user.phoneNumber
      },
      mathQuestion,
      mathAnswer,
      userMathAnswer,
      status: 'pending'
    });

    await newPayment.save();
    console.log('‚úÖ Payment saved to database:', newPayment._id);

    // Update user balance - PENDING BALANCE INCREASE
    const updatedBalance = await UserBalance.findOneAndUpdate(
      { userId: user.uid },
      { 
        $inc: { 
          pendingBalance: parseFloat(amount)
        },
        $set: {
          email: user.email,
          displayName: user.displayName || 'User'
        },
        $setOnInsert: {
          availableBalance: 0,
          totalAdded: 0,
          totalSpent: 0
        }
      },
      { 
        upsert: true, 
        new: true
      }
    );

    console.log('‚úÖ Balance updated successfully:', {
      userId: user.uid,
      pendingBalance: updatedBalance.pendingBalance,
      availableBalance: updatedBalance.availableBalance
    });

    res.status(201).json({
      success: true,
      message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶π‡¶¨‡ßá‡•§',
      payment: {
        id: newPayment._id,
        amount: newPayment.amount,
        transactionId: newPayment.transactionId,
        status: newPayment.status
      },
      balance: {
        availableBalance: updatedBalance.availableBalance,
        pendingBalance: updatedBalance.pendingBalance,
        totalAdded: updatedBalance.totalAdded,
        totalSpent: updatedBalance.totalSpent
      }
    });

  } catch (error) {
    console.error('‚ùå Error creating payment:', error);
    res.status(500).json({
      success: false,
      message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
    });
  }
});

// ‚úÖ Get user balance
router.get('/balance/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    const userBalance = await UserBalance.findOne({ userId: userId });

    if (!userBalance) {
      return res.json({
        success: true,
        balance: {
          availableBalance: 0,
          pendingBalance: 0,
          totalAdded: 0,
          totalSpent: 0
        }
      });
    }

    res.json({
      success: true,
      balance: {
        availableBalance: userBalance.availableBalance,
        pendingBalance: userBalance.pendingBalance,
        totalAdded: userBalance.totalAdded,
        totalSpent: userBalance.totalSpent
      }
    });

  } catch (error) {
    console.error('‚ùå Error fetching user balance:', error);
    res.status(500).json({
      success: false,
      message: '‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!'
    });
  }
});

// ‚úÖ Get user's payment history
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params;

    const payments = await Payment.find({ userId: userId })
      .sort({ createdAt: -1 })
      .select('amount transactionId status createdAt');

    res.json({
      success: true,
      payments: payments
    });

  } catch (error) {
    console.error('‚ùå Error fetching user payments:', error);
    res.status(500).json({
      success: false,
      message: '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!'
    });
  }
});

// ‚úÖ Get all pending payments (for admin)
router.get('/admin/pending', async (req, res) => {
  try {
    const pendingPayments = await Payment.find({ status: 'pending' })
      .sort({ createdAt: 1 });

    res.json({
      success: true,
      payments: pendingPayments
    });

  } catch (error) {
    console.error('‚ùå Error fetching pending payments:', error);
    res.status(500).json({
      success: false,
      message: '‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!'
    });
  }
});

export default router;