import React, { useState, useEffect } from 'react';
import { DollarSign, Plus, Clock, CheckCircle, X } from 'lucide-react';
import { auth } from '../../../firebaseConfig';
import './AddFund.css';

const AddFund = ({ 
  currentBalance, 
  pendingBalance, 
  userBkashNumber, 
  onAddPendingBalance,
  onBalanceUpdate
}) => {
  const [addAmount, setAddAmount] = useState('');
  const [transactionId, setTransactionId] = useState('');
  const [senderNumber, setSenderNumber] = useState('');
  const [paymentLoading, setPaymentLoading] = useState(false);
  const [paymentError, setPaymentError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [user, setUser] = useState(null);

  // Math challenge state
  const [showMathChallenge, setShowMathChallenge] = useState(false);
  const [mathQuestion, setMathQuestion] = useState('');
  const [mathAnswer, setMathAnswer] = useState('');
  const [userMathAnswer, setUserMathAnswer] = useState('');

  // Quick amount buttons
  const quickAmounts = [1000, 2000, 3000, 5000, 10000];

  // Get current user from Firebase
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((currentUser) => {
      if (currentUser) {
        setUser(currentUser);
        console.log('üî• Firebase User in AddFund:', currentUser.email);
      } else {
        setUser(null);
      }
    });

    return () => unsubscribe();
  }, []);

  // Generate random math question
  const generateMathQuestion = () => {
    const num1 = Math.floor(Math.random() * 10) + 1;
    const num2 = Math.floor(Math.random() * 10) + 1;
    const question = `${num1} + ${num2} = ?`;
    const answer = (num1 + num2).toString();
    
    setMathQuestion(question);
    setMathAnswer(answer);
    setUserMathAnswer('');
    return { question, answer };
  };

  // Validate transaction ID
  const validateTransactionId = (trxId) => {
    if (!trxId.trim()) return false;
    const trimmedTrx = trxId.trim().toUpperCase();
    const trxRegex = /^[A-Z][A-Z0-9]{5,}$/;
    return trxRegex.test(trimmedTrx);
  };

  // Validate phone number
  const validatePhoneNumber = (phone) => {
    if (!phone.trim()) return false;
    const phoneRegex = /^(?:\+88|01)?(?:\d{11}|\d{13})$/;
    return phoneRegex.test(phone.replace(/\s+/g, ''));
  };

  // Handle balance add request
  const handleAddBalance = async (e) => {
    e.preventDefault();
    
    // Check if user is logged in
    if (!user) {
      setPaymentError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!');
      return;
    }

    const amount = parseFloat(addAmount);
    
    if (isNaN(amount) || amount <= 0) {
      setPaymentError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!');
      return;
    }

    if (amount < 1000) {
      setPaymentError('‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ßß‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá!');
      return;
    }

    if (!transactionId.trim()) {
      setPaymentError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá bKash ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®!');
      return;
    }

    if (!senderNumber.trim()) {
      setPaymentError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®!');
      return;
    }

    // Validate transaction ID
    if (!validateTransactionId(transactionId)) {
      setPaymentError('‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶® (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ C ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ)');
      return;
    }

    // Validate phone number
    if (!validatePhoneNumber(senderNumber)) {
      setPaymentError('bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü! 11 ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: 01712345678)');
      return;
    }

    // Generate math challenge
    generateMathQuestion();
    setShowMathChallenge(true);
  };

  // Handle math challenge submission - BACKEND API CALL
  const handleMathChallengeSubmit = async () => {
    if (!userMathAnswer.trim()) {
      setPaymentError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®!');
      return;
    }

    if (userMathAnswer !== mathAnswer) {
      setPaymentError(`‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: ${mathAnswer}`);
      setUserMathAnswer('');
      return;
    }

    setPaymentLoading(true);
    setPaymentError('');
    setSuccessMessage('');

    try {
      const amount = parseFloat(addAmount);
      
      // Prepare payment data with user info
      const paymentData = {
        amount: amount,
        transactionId: transactionId.toUpperCase().trim(),
        senderNumber: senderNumber.trim(),
        userBkashNumber: userBkashNumber || '01766325020',
        user: {
          uid: user.uid,
          email: user.email,
          displayName: user.displayName,
          phoneNumber: user.phoneNumber
        },
        mathQuestion: mathQuestion,
        mathAnswer: mathAnswer,
        userMathAnswer: userMathAnswer
      };

      console.log('üí∞ Payment Request Details:', paymentData);

      // ‚úÖ BACKEND API CALL - MongoDB-‡¶§‡ßá data save ‡¶ï‡¶∞‡¶¨‡ßá
      const response = await fetch('http://localhost:5000/api/payments/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(paymentData)
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.message || '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá');
      }

      console.log('‚úÖ Backend Response:', result);

      // ‚úÖ Parent component-‡¶ï‡ßá inform ‡¶ï‡¶∞‡ßã payment successful ‡¶π‡ßü‡ßá‡¶õ‡ßá
      if (onAddPendingBalance) {
        onAddPendingBalance(paymentData);
      }

      // Success message
      setSuccessMessage(`‡ß≥ ${amount.toLocaleString()} ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶π‡¶¨‡ßá‡•§`);
      
      // Reset form
      setAddAmount('');
      setTransactionId('');
      setSenderNumber('');
      setUserMathAnswer('');
      setShowMathChallenge(false);
      
    } catch (error) {
      console.error('‚ùå Payment error:', error);
      setPaymentError(error.message || '‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§');
    } finally {
      setPaymentLoading(false);
    }
  };

  // Handle quick amount selection
  const handleQuickAmount = (amount) => {
    setAddAmount(amount.toString());
    setPaymentError('');
    setSuccessMessage('');
  };

  // ‚úÖ ‡¶Ø‡¶¶‡¶ø user ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, loading show ‡¶ï‡¶∞‡¶¨‡ßá
  if (!user) {
    return (
      <div className="add-fund-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="add-fund-container">
      {/* User Info Display */}
      {user && (
        <div className="user-info-card">
          <div className="user-info">
            <strong>‡¶á‡¶â‡¶ú‡¶æ‡¶∞:</strong> {user.email}
            {user.displayName && <span> | {user.displayName}</span>}
          </div>
        </div>
      )}

      {/* Balance Cards */}
      <div className="balance-cards">
        {/* Available Balance Card */}
        <div className="balance-card available">
          <div className="balance-header">
            <DollarSign size={24} className="balance-icon" />
            <div className="balance-info">
              <h4>‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏</h4>
              {/* ‚úÖ Dashboard ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ current balance */}
              <div className="balance-amount">‡ß≥ {currentBalance?.toFixed(2) || '0.00'}</div>
            </div>
          </div>
          <p className="balance-note">
            ‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ñ‡¶®‡¶á ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®
          </p>
        </div>

        {/* Pending Balance Card */}
        <div className="balance-card pending">
          <div className="balance-header">
            <Clock size={24} className="balance-icon" />
            <div className="balance-info">
              <h4>‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏</h4>
              {/* ‚úÖ Dashboard ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ pending balance */}
              <div className="balance-amount">‡ß≥ {pendingBalance?.toFixed(2) || '0.00'}</div>
            </div>
          </div>
          <p className="balance-note">
            ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶π‡¶¨‡ßá
          </p>
        </div>
      </div>

      {/* Rest of your component remains the same */}
      {/* Math Challenge Modal */}
      {showMathChallenge && (
        <div className="math-challenge-modal">
          <div className="math-challenge-content">
            <h3>‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®</h3>
            <p>‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®:</p>
            
            <div className="math-question">
              <strong>{mathQuestion}</strong>
            </div>
            
            <div className="form-group">
              <input
                type="text"
                placeholder="‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ)"
                value={userMathAnswer}
                onChange={(e) => setUserMathAnswer(e.target.value.replace(/[^0-9]/g, ''))}
                disabled={paymentLoading}
                className="math-input"
              />
            </div>

            <div className="math-challenge-buttons">
              <button
                onClick={handleMathChallengeSubmit}
                disabled={paymentLoading || !userMathAnswer}
                className="submit-challenge-btn"
              >
                {paymentLoading ? (
                  <>
                    <div className="spinner"></div>
                    ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...
                  </>
                ) : (
                  '‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®'
                )}
              </button>
              
              <button
                onClick={() => {
                  setShowMathChallenge(false);
                  setUserMathAnswer('');
                }}
                className="cancel-challenge-btn"
                disabled={paymentLoading}
              >
                ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Add Balance Form */}
      <div className="add-balance-section">
        <h4>bKash ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</h4>
        
        {paymentError && (
          <div className="payment-error">
            <X size={18} />
            {paymentError}
          </div>
        )}

        {successMessage && (
          <div className="success-message">
            <CheckCircle size={18} />
            {successMessage}
          </div>
        )}

        {/* Quick Amount Buttons */}
        <div className="quick-amount-section">
          <h5>‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:</h5>
          <div className="quick-amount-buttons">
            {quickAmounts.map(amount => (
              <button
                key={amount}
                type="button"
                className={`quick-amount-btn ${addAmount === amount.toString() ? 'selected' : ''}`}
                onClick={() => handleQuickAmount(amount)}
                disabled={paymentLoading}
              >
                ‡ß≥ {amount.toLocaleString()}
              </button>
            ))}
          </div>
        </div>

        {/* Custom Amount Form */}
        <form onSubmit={handleAddBalance} className="add-balance-form">
          <div className="form-group">
            <label>‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü</label>
            <input 
              type="number" 
              placeholder="‡¶ï‡¶§ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"
              value={addAmount}
              onChange={(e) => {
                setAddAmount(e.target.value);
                setPaymentError('');
                setSuccessMessage('');
              }}
              min="1000"
              step="100"
              required
              disabled={paymentLoading}
              className="amount-input"
            />
            <small>‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡ßß‡ß¶‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá</small>
          </div>

          <div className="form-group">
            <label>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞</label>
            <input 
              type="tel" 
              placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡¶Ø‡ßá‡¶Æ‡¶®: 01712345678)"
              value={senderNumber}
              onChange={(e) => {
                setSenderNumber(e.target.value);
                setPaymentError('');
                setSuccessMessage('');
              }}
              required
              disabled={paymentLoading}
              className="phone-input"
              style={{
                borderColor: senderNumber && !validatePhoneNumber(senderNumber) ? '#dc3545' : '#d1d5db',
                color: senderNumber && !validatePhoneNumber(senderNumber) ? '#dc3545' : '#1a1a1a'
              }}
            />
            <small>
              {senderNumber && !validatePhoneNumber(senderNumber) 
                ? '‚ö†Ô∏è bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü (11 ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®)' 
                : '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá‡¶®'}
            </small>
          </div>

          <div className="form-group">
            <label>bKash ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø</label>
            <input 
              type="text" 
              placeholder="bKash Trx ID (‡¶Ø‡ßá‡¶Æ‡¶®: C6A8B9X2)"
              value={transactionId}
              onChange={(e) => {
                setTransactionId(e.target.value);
                setPaymentError('');
                setSuccessMessage('');
              }}
              required
              disabled={paymentLoading}
              className="trx-input"
              style={{
                borderColor: transactionId && !validateTransactionId(transactionId) ? '#dc3545' : '#d1d5db',
                color: transactionId && !validateTransactionId(transactionId) ? '#dc3545' : '#1a1a1a'
              }}
            />
            <small>
              {transactionId && !validateTransactionId(transactionId) 
                ? '‚ö†Ô∏è ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡ßü (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ C ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡ßü)' 
                : 'Money Send ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶Ø‡ßá Trx ID ‡¶™‡¶æ‡¶¨‡ßá‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: C6A8B9X2)'}
            </small>
          </div>
          
          <button 
            type="submit" 
            className="add-balance-btn"
            disabled={paymentLoading || !addAmount || !transactionId || !senderNumber || parseFloat(addAmount) < 1000 || !validateTransactionId(transactionId) || !validatePhoneNumber(senderNumber)}
          >
            {paymentLoading ? (
              <>
                <div className="spinner"></div>
                ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç...
              </>
            ) : (
              <>
                <Plus size={18} />
                ‡ß≥ {addAmount || '0'} ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
              </>
            )}
          </button>
        </form>

        {/* Payment Instructions */}
        <div className="payment-instructions">
          <h5>‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ:</h5>
          <ol>
            <li>‡¶â‡¶™‡¶∞‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®</li>
            <li><strong>bKash App ‡¶è ‡¶ó‡¶ø‡ßü‡ßá 01766325020 ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Æ‡¶æ‡¶®‡¶ø ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</strong></li>
            <li>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®</li>
            <li>‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: C6A8B9X2)</li>
            <li>‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: 8 + 8 = 16)</li>
            <li>‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶® - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶™‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá</li>
            <li>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶π‡¶¨‡ßá</li>
          </ol>
          
          <div className="important-note">
            <strong>‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£:</strong> 
            <ul>
              <li>‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶® (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ C ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ)</li>
              <li>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ bKash ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶®</li>
              <li>‡¶ó‡¶æ‡¶£‡¶ø‡¶§‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡¶ø‡¶®</li>
              <li>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶è‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶π‡¶¨‡ßá</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddFund;